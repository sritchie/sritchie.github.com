#+STARTUP: showall indent
#+STARTUP: hidestars
#+BEGIN_HTML
---
layout: post
title: Testing Cascalog with Midje
---

<p class="meta">Date - San Francisco</p>
#+END_HTML

* Testing Cascalog with Midje

What's midje?
What's cascalog?

TODO: 

Example project
Links to Midje
Post to Cascalog group
Post to midje group, maybe?

Topics to discuss:

1. Testing any sort of query with =fact?-= and =fact?<-=
2. Future facts
3. =lein-midje=, emacs midje mode, how to run this stuff
4. Testing queries with mocked input -- provided, against-background

* Example Query

First thing is deciding what sort of queries we want to highlight, here. What do you want to test?

Let's say we have a query that counts words:

#+begin_src clojure
  (ns cascalog.example.wordcount
    (:use cascalog.api)
    (:require [cascalog.ops :as c]))
  
  (defn wc-query
    "Returns a subquery that generates wordcounts for every word in the
    textfiles located at `text-path`."
    [text-path]
    (let [src (hfs-textline text-path)]
      (<- [?word ?count]
          (src ?textline)
          (c/re-parse [#"[^\s]+"] ?textline :> ?word)
          (c/count ?count))))
  
  (defn -main
    "Accepts a path to a number of text files and a results path, and
    prints each distinct word along with its count to an `hfs-textline`
    tap at `results-path`."
    [text-path results-path]
    (?- (hfs-textline results-path)
        (wc-query text-path)))
  
#+end_src

This is difficult to test without making a temporary directory, dumping a bunch of lines of text into it, actually executing the query with some wrapper, then cleaning up. Access to the filesystem adds complexity!

Instead, we can use midje-cascalog to mock out the results of calling =hfs-textline= on a mocked argument.

#+begin_src clojure
  (use 'midje.cascalog)
  (use 'cascalog.example.wordcount)
  
  (def textline-tuples
    [["Call me Ishmael. Some years ago -- never mind how long"]
     ["precisely -- having little or no money in my purse, and"]
     ["nothing particular to interest me on shore, I thought I"]
     ["would sail about a little and see the watery part of the world."]])
  
  ;; TODO: Fill in the proper result vector!
  (fact?- result-vec
          (wc-query ..text-path..)
          (provided (hfs-textline ..text-path..) => textline-tuples))
  
  
  ;; Second version of the above -- say we need the mocking for multiple
  ;; queries? Use against-background.
  
  (fact?- (contains [["Ishmael" 1] ["sail" 1]] :in-any-order)
          (wc-query :text-path)
  
          result-vec (wc-query :text-path)
          (against-background
            (hfs-textline :text-path) => textline-tuples))
  
#+end_src

** Mocking Variables

I like using keywords, as I like the syntax highlighting, but Midje provides you with the ability to use ..variable-names.. or "strings". You could use numbers too, I guess, but it wouldn't be very clear.
